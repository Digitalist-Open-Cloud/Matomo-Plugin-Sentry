{"version":3,"file":"scope.js","sourceRoot":"","sources":["../src/scope.ts"],"names":[],"mappings":"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","sourcesContent":["import { Breadcrumb, SentryEvent, SentryEventHint, Severity, User } from '@sentry/types';\n\n/**\n * Holds additional event information. {@link Scope.applyToEvent} will be\n * called by the client before an event will be sent.\n */\nexport class Scope {\n  /** Flag if notifiying is happening. */\n  protected notifyingListeners: boolean = false;\n\n  /** Callback for client to receive scope changes. */\n  protected scopeListeners: Array<(scope: Scope) => void> = [];\n\n  /** Callback list that will be called after {@link applyToEvent}. */\n  protected eventProcessors: Array<(scope: SentryEvent, hint?: SentryEventHint) => Promise<SentryEvent | null>> = [];\n\n  /** Array of breadcrumbs. */\n  protected breadcrumbs: Breadcrumb[] = [];\n\n  /** User */\n  protected user: User = {};\n\n  /** Tags */\n  protected tags: { [key: string]: string } = {};\n\n  /** Extra */\n  protected extra: { [key: string]: any } = {};\n\n  /** Fingerprint */\n  protected fingerprint?: string[];\n\n  /** Severity */\n  protected level?: Severity;\n\n  /** Add internal on change listener. */\n  public addScopeListener(callback: (scope: Scope) => void): void {\n    this.scopeListeners.push(callback);\n  }\n\n  /** Add new event processor that will be called after {@link applyToEvent}. */\n  public addEventProcessor(\n    callback: (scope: SentryEvent, hint?: SentryEventHint) => Promise<SentryEvent | null>,\n  ): Scope {\n    this.eventProcessors.push(callback);\n    return this;\n  }\n\n  /**\n   * This will be called on every set call.\n   */\n  protected notifyScopeListeners(): void {\n    if (!this.notifyingListeners) {\n      this.notifyingListeners = true;\n      setTimeout(() => {\n        this.scopeListeners.forEach(callback => {\n          callback(this);\n        });\n        this.notifyingListeners = false;\n      }, 0);\n    }\n  }\n\n  /**\n   * This will be called after {@link applyToEvent} is finished.\n   */\n  protected async notifyEventProcessors(event: SentryEvent, hint?: SentryEventHint): Promise<SentryEvent | null> {\n    let processedEvent: SentryEvent | null = event;\n    for (const processor of this.eventProcessors) {\n      try {\n        processedEvent = await processor({ ...processedEvent }, hint);\n        if (processedEvent === null) {\n          return null;\n        }\n      } catch (e) {\n        continue;\n      }\n    }\n    return processedEvent;\n  }\n\n  /**\n   * Updates user context information for future events.\n   * @param user User context object to merge into current context.\n   */\n  public setUser(user: User): Scope {\n    this.user = user;\n    this.notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Updates tags context information for future events.\n   * @param tags Tags context object to merge into current context.\n   */\n  public setTag(key: string, value: string): Scope {\n    this.tags = { ...this.tags, [key]: value };\n    this.notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Updates extra context information for future events.\n   * @param extra context object to merge into current context.\n   */\n  public setExtra(key: string, extra: any): Scope {\n    this.extra = { ...this.extra, [key]: extra };\n    this.notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Sets the fingerprint on the scope to send with the events.\n   * @param fingerprint string[] to group events in Sentry.\n   */\n  public setFingerprint(fingerprint: string[]): Scope {\n    this.fingerprint = fingerprint;\n    this.notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Sets the level on the scope for future events.\n   * @param level string {@link Severity}\n   */\n  public setLevel(level: Severity): Scope {\n    this.level = level;\n    this.notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Inherit values from the parent scope.\n   * @param scope to clone.\n   */\n  public static clone(scope?: Scope): Scope {\n    const newScope = new Scope();\n    Object.assign(newScope, scope, {\n      scopeListeners: [],\n    });\n    if (scope) {\n      newScope.eventProcessors = [...scope.eventProcessors];\n    }\n    return newScope;\n  }\n\n  /** Returns tags. */\n  public getTags(): { [key: string]: string } {\n    return this.tags;\n  }\n\n  /** Returns extra. */\n  public getExtra(): { [key: string]: any } {\n    return this.extra;\n  }\n\n  /** Returns extra. */\n  public getUser(): User {\n    return this.user;\n  }\n\n  /** Returns fingerprint. */\n  public getFingerprint(): string[] | undefined {\n    return this.fingerprint;\n  }\n\n  /** Returns breadcrumbs. */\n  public getBreadcrumbs(): Breadcrumb[] {\n    return this.breadcrumbs;\n  }\n\n  /** Returns level. */\n  public getLevel(): Severity | undefined {\n    return this.level;\n  }\n\n  /** Clears the current scope and resets its properties. */\n  public clear(): void {\n    this.breadcrumbs = [];\n    this.tags = {};\n    this.extra = {};\n    this.user = {};\n    this.level = undefined;\n    this.fingerprint = undefined;\n    this.notifyScopeListeners();\n  }\n\n  /**\n   * Sets the breadcrumbs in the scope\n   * @param breadcrumbs Breadcrumb\n   * @param maxBreadcrumbs number of max breadcrumbs to merged into event.\n   */\n  public addBreadcrumb(breadcrumb: Breadcrumb, maxBreadcrumbs?: number): void {\n    this.breadcrumbs =\n      maxBreadcrumbs !== undefined && maxBreadcrumbs >= 0\n        ? [...this.breadcrumbs, breadcrumb].slice(-maxBreadcrumbs)\n        : [...this.breadcrumbs, breadcrumb];\n    this.notifyScopeListeners();\n  }\n\n  /**\n   * Applies the current context and fingerprint to the event.\n   * Note that breadcrumbs will be added by the client.\n   * Also if the event has already breadcrumbs on it, we do not merge them.\n   * @param event SentryEvent\n   * @param hint May contain additional informartion about the original exception.\n   * @param maxBreadcrumbs number of max breadcrumbs to merged into event.\n   */\n  public async applyToEvent(\n    event: SentryEvent,\n    hint?: SentryEventHint,\n    maxBreadcrumbs?: number,\n  ): Promise<SentryEvent | null> {\n    if (this.extra && Object.keys(this.extra).length) {\n      event.extra = { ...this.extra, ...event.extra };\n    }\n    if (this.tags && Object.keys(this.tags).length) {\n      event.tags = { ...this.tags, ...event.tags };\n    }\n    if (this.user && Object.keys(this.user).length) {\n      event.user = { ...this.user, ...event.user };\n    }\n    if (this.fingerprint && event.fingerprint === undefined) {\n      event.fingerprint = this.fingerprint;\n    }\n    if (this.level && event.level === undefined) {\n      event.level = this.level;\n    }\n\n    const hasNoBreadcrumbs = !event.breadcrumbs || event.breadcrumbs.length === 0;\n    if (hasNoBreadcrumbs && this.breadcrumbs.length > 0) {\n      event.breadcrumbs =\n        maxBreadcrumbs !== undefined && maxBreadcrumbs >= 0\n          ? this.breadcrumbs.slice(-maxBreadcrumbs)\n          : this.breadcrumbs;\n    }\n\n    return this.notifyEventProcessors(event, hint);\n  }\n}\n"]}