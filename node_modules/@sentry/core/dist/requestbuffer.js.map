{"version":3,"file":"requestbuffer.js","sourceRoot":"","sources":["../src/requestbuffer.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,0CAA0C;AAC1C;IAAA;QACE,sCAAsC;QACrB,WAAM,GAAoB,IAAI,GAAG,EAAE,CAAC;IA4CvD,CAAC;IA1CC;;;;;OAKG;IACU,2BAAG,GAAhB,UAAiB,IAAgB;;;;gBAC/B,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;gBACtB,IAAI,CAAC,IAAI,CAAC,cAAM,OAAA,KAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,EAAxB,CAAwB,CAAC,CAAC,KAAK,CAAC,cAAM,OAAA,KAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,EAAxB,CAAwB,CAAC,CAAC;gBAChF,sBAAO,IAAI,EAAC;;;KACb;IAED;;OAEG;IACI,8BAAM,GAAb;QACE,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;IAC1B,CAAC;IAED;;;;;OAKG;IACU,6BAAK,GAAlB,UAAmB,OAAgB;;;;gBACjC,sBAAO,IAAI,OAAO,CAAU,UAAA,OAAO;wBACjC,IAAM,kBAAkB,GAAG,UAAU,CAAC;4BACpC,IAAI,OAAO,IAAI,OAAO,GAAG,CAAC,EAAE;gCAC1B,OAAO,CAAC,KAAK,CAAC,CAAC;6BAChB;wBACH,CAAC,EAAE,OAAO,CAAC,CAAC;wBACZ,OAAO,CAAC,GAAG,CAAC,KAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;6BAC9B,IAAI,CAAC;4BACJ,YAAY,CAAC,kBAAkB,CAAC,CAAC;4BACjC,OAAO,CAAC,IAAI,CAAC,CAAC;wBAChB,CAAC,CAAC;6BACD,KAAK,CAAC;4BACL,OAAO,CAAC,IAAI,CAAC,CAAC;wBAChB,CAAC,CAAC,CAAC;oBACP,CAAC,CAAC,EAAC;;;KACJ;IACH,oBAAC;AAAD,CAAC,AA9CD,IA8CC;AA9CY,sCAAa","sourcesContent":["/** A simple queue that holds promises. */\nexport class RequestBuffer<T> {\n  /** Internal set of queued Promises */\n  private readonly buffer: Set<Promise<T>> = new Set();\n\n  /**\n   * Add a promise to the queue.\n   *\n   * @param task Can be any Promise<T>\n   * @returns The original promise.\n   */\n  public async add(task: Promise<T>): Promise<T> {\n    this.buffer.add(task);\n    task.then(() => this.buffer.delete(task)).catch(() => this.buffer.delete(task));\n    return task;\n  }\n\n  /**\n   * This function returns the number of unresolved promises in the queue.\n   */\n  public length(): number {\n    return this.buffer.size;\n  }\n\n  /**\n   * This will drain the whole queue, returns true if queue is empty or drained.\n   * If timeout is provided and the queue takes longer to drain, the promise still resolves but with false.\n   *\n   * @param timeout Number in ms to wait until it resolves with false.\n   */\n  public async drain(timeout?: number): Promise<boolean> {\n    return new Promise<boolean>(resolve => {\n      const capturedSetTimeout = setTimeout(() => {\n        if (timeout && timeout > 0) {\n          resolve(false);\n        }\n      }, timeout);\n      Promise.all(this.buffer.values())\n        .then(() => {\n          clearTimeout(capturedSetTimeout);\n          resolve(true);\n        })\n        .catch(() => {\n          resolve(true);\n        });\n    });\n  }\n}\n"]}