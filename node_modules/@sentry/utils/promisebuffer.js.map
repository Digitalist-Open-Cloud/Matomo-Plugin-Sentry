{"version":3,"file":"promisebuffer.js","sourceRoot":"","sources":["src/promisebuffer.ts"],"names":[],"mappings":";;;AAAA,iCAAsC;AAEtC,0CAA0C;AAC1C;IACE,uBAA6B,MAAe;QAAf,WAAM,GAAN,MAAM,CAAS;QAE5C,sCAAsC;QACrB,YAAO,GAAsB,EAAE,CAAC;IAHF,CAAC;IAKhD;;OAEG;IACI,+BAAO,GAAd;QACE,OAAO,IAAI,CAAC,MAAM,KAAK,SAAS,IAAI,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC;IAClE,CAAC;IAED;;;;;OAKG;IACU,2BAAG,GAAhB,UAAiB,IAAgB;;;;gBAC/B,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE;oBACnB,sBAAO,OAAO,CAAC,MAAM,CAAC,IAAI,mBAAW,CAAC,iDAAiD,CAAC,CAAC,EAAC;iBAC3F;gBACD,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;oBACrC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;iBACzB;gBACD,IAAI;qBACD,IAAI,CAAC;oBAAY,sBAAA,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAA;yBAAA,CAAC;qBACnC,KAAK,CAAC;;wBACL,sBAAA,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC;gCACtB,gFAAgF;gCAChF,oCAAoC;4BACtC,CAAC,CAAC,EAAA;;qBAAA,CACH,CAAC;gBACJ,sBAAO,IAAI,EAAC;;;KACb;IAED;;;;;OAKG;IACU,8BAAM,GAAnB,UAAoB,IAAgB;;;;gBAC5B,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC1E,sBAAO,WAAW,EAAC;;;KACpB;IAED;;OAEG;IACI,8BAAM,GAAb;QACE,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;IAC7B,CAAC;IAED;;;;;OAKG;IACU,6BAAK,GAAlB,UAAmB,OAAgB;;;;gBACjC,sBAAO,IAAI,OAAO,CAAU,UAAA,OAAO;wBACjC,IAAM,kBAAkB,GAAG,UAAU,CAAC;4BACpC,IAAI,OAAO,IAAI,OAAO,GAAG,CAAC,EAAE;gCAC1B,OAAO,CAAC,KAAK,CAAC,CAAC;6BAChB;wBACH,CAAC,EAAE,OAAO,CAAC,CAAC;wBACZ,OAAO,CAAC,GAAG,CAAC,KAAI,CAAC,OAAO,CAAC;6BACtB,IAAI,CAAC;4BACJ,YAAY,CAAC,kBAAkB,CAAC,CAAC;4BACjC,OAAO,CAAC,IAAI,CAAC,CAAC;wBAChB,CAAC,CAAC;6BACD,KAAK,CAAC;4BACL,OAAO,CAAC,IAAI,CAAC,CAAC;wBAChB,CAAC,CAAC,CAAC;oBACP,CAAC,CAAC,EAAC;;;KACJ;IACH,oBAAC;AAAD,CAAC,AA9ED,IA8EC;AA9EY,sCAAa","sourcesContent":["import { SentryError } from './error';\n\n/** A simple queue that holds promises. */\nexport class PromiseBuffer<T> {\n  public constructor(protected _limit?: number) {}\n\n  /** Internal set of queued Promises */\n  private readonly _buffer: Array<Promise<T>> = [];\n\n  /**\n   * Says if the buffer is ready to take more requests\n   */\n  public isReady(): boolean {\n    return this._limit === undefined || this.length() < this._limit;\n  }\n\n  /**\n   * Add a promise to the queue.\n   *\n   * @param task Can be any Promise<T>\n   * @returns The original promise.\n   */\n  public async add(task: Promise<T>): Promise<T> {\n    if (!this.isReady()) {\n      return Promise.reject(new SentryError('Not adding Promise due to buffer limit reached.'));\n    }\n    if (this._buffer.indexOf(task) === -1) {\n      this._buffer.push(task);\n    }\n    task\n      .then(async () => this.remove(task))\n      .catch(async () =>\n        this.remove(task).catch(() => {\n          // We have to add this catch here otherwise we have an unhandledPromiseRejection\n          // because it's a new Promise chain.\n        }),\n      );\n    return task;\n  }\n\n  /**\n   * Remove a promise to the queue.\n   *\n   * @param task Can be any Promise<T>\n   * @returns Removed promise.\n   */\n  public async remove(task: Promise<T>): Promise<T> {\n    const removedTask = this._buffer.splice(this._buffer.indexOf(task), 1)[0];\n    return removedTask;\n  }\n\n  /**\n   * This function returns the number of unresolved promises in the queue.\n   */\n  public length(): number {\n    return this._buffer.length;\n  }\n\n  /**\n   * This will drain the whole queue, returns true if queue is empty or drained.\n   * If timeout is provided and the queue takes longer to drain, the promise still resolves but with false.\n   *\n   * @param timeout Number in ms to wait until it resolves with false.\n   */\n  public async drain(timeout?: number): Promise<boolean> {\n    return new Promise<boolean>(resolve => {\n      const capturedSetTimeout = setTimeout(() => {\n        if (timeout && timeout > 0) {\n          resolve(false);\n        }\n      }, timeout);\n      Promise.all(this._buffer)\n        .then(() => {\n          clearTimeout(capturedSetTimeout);\n          resolve(true);\n        })\n        .catch(() => {\n          resolve(true);\n        });\n    });\n  }\n}\n"]}