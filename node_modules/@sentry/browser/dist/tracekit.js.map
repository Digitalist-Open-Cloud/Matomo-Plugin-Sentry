{"version":3,"file":"tracekit.js","sourceRoot":"","sources":["../src/tracekit.ts"],"names":[],"mappings":"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","sourcesContent":["// tslint:disable\n\nimport { isError, isErrorEvent } from '@sentry/utils/is';\nimport { getGlobalObject } from '@sentry/utils/misc';\n\n/**\n * @hidden\n */\nexport interface StackFrame {\n  url: string;\n  func: string;\n  args: string[];\n  line: number;\n  column: number;\n  context: string[];\n}\n\n/**\n * @hidden\n */\nexport interface StackTrace {\n  /**\n   * Known modes: callers, failed, multiline, onerror, stack, stacktrace\n   */\n  mode: string;\n  mechanism: string;\n  name: string;\n  message: string;\n  url: string;\n  stack: StackFrame[];\n  useragent: string;\n  original?: string;\n}\n\ninterface ComputeStackTrace {\n  /**\n   * Computes a stack trace for an exception.\n   * @param {Error} ex\n   * @param {(string|number)=} depth\n   */\n  (ex: Error, depth?: string | number): StackTrace;\n}\n\n/**\n * TraceKit - Cross brower stack traces\n *\n * This was originally forked from github.com/occ/TraceKit, but has since been\n * largely modified and is now maintained as part of Sentry JS SDK.\n *\n * NOTE: Last merge with upstream repository\n * Jul 11,2018 - #f03357c\n *\n * https://github.com/csnover/TraceKit\n * @license MIT\n * @namespace TraceKit\n */\n\nvar window = getGlobalObject<Window>();\n\ninterface TraceKit {\n  report: any;\n  collectWindowErrors: any;\n  computeStackTrace: any;\n  linesOfContext: any;\n}\n\nvar TraceKit: TraceKit = {\n  report: false,\n  collectWindowErrors: false,\n  computeStackTrace: false,\n  linesOfContext: false,\n};\n\n// var TraceKit: TraceKitInterface = {};\n// var TraceKit = {};\n\n// global reference to slice\nvar UNKNOWN_FUNCTION = '?';\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Error_types\nvar ERROR_TYPES_RE = /^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/;\n\n/**\n * A better form of hasOwnProperty<br/>\n * Example: `_has(MainHostObject, property) === true/false`\n *\n * @param {Object} object to check property\n * @param {string} key to check\n * @return {Boolean} true if the object has the key and it is not inherited\n */\nfunction _has(object: any, key: any) {\n  return Object.prototype.hasOwnProperty.call(object, key);\n}\n\n/**\n * A safe form of location.href<br/>\n *\n * @return {string} location.href\n */\nfunction getLocationHref() {\n  if (typeof document === 'undefined' || document.location == null) return '';\n  return document.location.href;\n}\n\n/**\n * Cross-browser processing of unhandled exceptions\n *\n * Syntax:\n * ```js\n *   TraceKit.report.subscribe(function(stackInfo) { ... })\n *   TraceKit.report(exception)\n *   try { ...code... } catch(ex) { TraceKit.report(ex); }\n * ```\n *\n * Supports:\n *   - Firefox: full stack trace with line numbers, plus column number\n *     on top frame; column number is not guaranteed\n *   - Opera: full stack trace with line and column numbers\n *   - Chrome: full stack trace with line and column numbers\n *   - Safari: line and column number for the top frame only; some frames\n *     may be missing, and column number is not guaranteed\n *   - IE: line and column number for the top frame only; some frames\n *     may be missing, and column number is not guaranteed\n *\n * In theory, TraceKit should work on all of the following versions:\n *   - IE5.5+ (only 8.0 tested)\n *   - Firefox 0.9+ (only 3.5+ tested)\n *   - Opera 7+ (only 10.50 tested; versions 9 and earlier may require\n *     Exceptions Have Stacktrace to be enabled in opera:config)\n *   - Safari 3+ (only 4+ tested)\n *   - Chrome 1+ (only 5+ tested)\n *   - Konqueror 3.5+ (untested)\n *\n * Requires TraceKit.computeStackTrace.\n *\n * Tries to catch all unhandled exceptions and report them to the\n * subscribed handlers. Please note that TraceKit.report will rethrow the\n * exception. This is REQUIRED in order to get a useful stack trace in IE.\n * If the exception does not reach the top of the browser, you will only\n * get a stack trace from the point where TraceKit.report was called.\n *\n * Handlers receive a TraceKit.StackTrace object as described in the\n * TraceKit.computeStackTrace docs.\n *\n * @memberof TraceKit\n * @namespace\n */\nTraceKit.report = (function reportModuleWrapper() {\n  var handlers: any = [],\n    lastException: any = null,\n    lastExceptionStack: any = null;\n\n  /**\n   * Add a crash handler.\n   * @param {Function} handler\n   * @memberof TraceKit.report\n   */\n  function subscribe(handler: any) {\n    // NOTE: We call both handlers manually in browser/integrations/globalhandler.ts\n    // So user can choose which one he wants to attach\n\n    // installGlobalHandler();\n    // installGlobalUnhandledRejectionHandler();\n    handlers.push(handler);\n  }\n\n  /**\n   * Dispatch stack information to all handlers.\n   * @param {TraceKit.StackTrace} stack\n   * @param {boolean} isWindowError Is this a top-level window error?\n   * @param {Error=} error The error that's being handled (if available, null otherwise)\n   * @memberof TraceKit.report\n   * @throws An exception if an error occurs while calling an handler.\n   */\n  function notifyHandlers(stack: any, isWindowError: any, error: any) {\n    var exception = null;\n    if (isWindowError && !TraceKit.collectWindowErrors) {\n      return;\n    }\n    for (var i in handlers) {\n      if (_has(handlers, i)) {\n        try {\n          handlers[i](stack, isWindowError, error);\n        } catch (inner) {\n          exception = inner;\n        }\n      }\n    }\n\n    if (exception) {\n      throw exception;\n    }\n  }\n\n  var _oldOnerrorHandler: any, _onErrorHandlerInstalled: any;\n\n  /**\n   * Ensures all global unhandled exceptions are recorded.\n   * Supported by Gecko and IE.\n   * @param {string} message Error message.\n   * @param {string} url URL of script that generated the exception.\n   * @param {(number|string)} lineNo The line number at which the error occurred.\n   * @param {(number|string)=} columnNo The column number at which the error occurred.\n   * @param {Error=} errorObj The actual Error object.\n   * @memberof TraceKit.report\n   */\n  function traceKitWindowOnError(message: any, url: any, lineNo: any, columnNo: any, errorObj: any) {\n    var stack = null;\n    // If 'errorObj' is ErrorEvent, get real Error from inside\n    errorObj = isErrorEvent(errorObj) ? errorObj.error : errorObj;\n    // If 'message' is ErrorEvent, get real message from inside\n    message = isErrorEvent(message) ? message.message : message;\n\n    if (lastExceptionStack) {\n      TraceKit.computeStackTrace.augmentStackTraceWithInitialElement(lastExceptionStack, url, lineNo, message);\n      processLastException();\n    } else if (errorObj && isError(errorObj)) {\n      stack = TraceKit.computeStackTrace(errorObj);\n      stack.mechanism = 'onerror';\n      notifyHandlers(stack, true, errorObj);\n    } else {\n      var location: any = {\n        url: url,\n        line: lineNo,\n        column: columnNo,\n      };\n\n      var name;\n      var msg = message; // must be new var or will modify original `arguments`\n      if ({}.toString.call(message) === '[object String]') {\n        var groups = message.match(ERROR_TYPES_RE);\n        if (groups) {\n          name = groups[1];\n          msg = groups[2];\n        }\n      }\n\n      location.func = UNKNOWN_FUNCTION;\n      location.context = null;\n      stack = {\n        name: name,\n        message: msg,\n        mode: 'onerror',\n        mechanism: 'onerror',\n        stack: [\n          {\n            ...location,\n            // Firefox sometimes doesn't return url correctly and this is an old behavior\n            // that I prefer to port here as well.\n            // It can be altered only here, as previously it's using `location.url` for other things — Kamil\n            url: location.url || getLocationHref(),\n          },\n        ],\n      };\n\n      notifyHandlers(stack, true, null);\n    }\n\n    if (_oldOnerrorHandler) {\n      // @ts-ignore\n      return _oldOnerrorHandler.apply(this, arguments);\n    }\n\n    return false;\n  }\n\n  /**\n   * Ensures all unhandled rejections are recorded.\n   * @param {PromiseRejectionEvent} e event.\n   * @memberof TraceKit.report\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onunhandledrejection\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent\n   */\n  function traceKitWindowOnUnhandledRejection(e: any) {\n    var err = (e && (e.detail ? e.detail.reason : e.reason)) || e;\n    var stack = TraceKit.computeStackTrace(err);\n    stack.mechanism = 'onunhandledrejection';\n    notifyHandlers(stack, true, err);\n  }\n\n  /**\n   * Install a global onerror handler\n   * @memberof TraceKit.report\n   */\n  function installGlobalHandler() {\n    if (_onErrorHandlerInstalled === true) {\n      return;\n    }\n\n    _oldOnerrorHandler = window.onerror;\n    window.onerror = traceKitWindowOnError;\n    _onErrorHandlerInstalled = true;\n  }\n\n  /**\n   * Install a global onunhandledrejection handler\n   * @memberof TraceKit.report\n   */\n  function installGlobalUnhandledRejectionHandler() {\n    (window as any).onunhandledrejection = traceKitWindowOnUnhandledRejection;\n  }\n\n  /**\n   * Process the most recent exception\n   * @memberof TraceKit.report\n   */\n  function processLastException() {\n    var _lastExceptionStack = lastExceptionStack,\n      _lastException = lastException;\n    lastExceptionStack = null;\n    lastException = null;\n    notifyHandlers(_lastExceptionStack, false, _lastException);\n  }\n\n  /**\n   * Reports an unhandled Error to TraceKit.\n   * @param {Error} ex\n   * @memberof TraceKit.report\n   * @throws An exception if an incomplete stack trace is detected (old IE browsers).\n   */\n  function report(ex: any) {\n    if (lastExceptionStack) {\n      if (lastException === ex) {\n        return; // already caught by an inner catch block, ignore\n      } else {\n        processLastException();\n      }\n    }\n\n    var stack = TraceKit.computeStackTrace(ex);\n    lastExceptionStack = stack;\n    lastException = ex;\n\n    // If the stack trace is incomplete, wait for 2 seconds for\n    // slow slow IE to see if onerror occurs or not before reporting\n    // this exception; otherwise, we will end up with an incomplete\n    // stack trace\n    setTimeout(\n      function() {\n        if (lastException === ex) {\n          processLastException();\n        }\n      },\n      stack.incomplete ? 2000 : 0,\n    );\n\n    throw ex; // re-throw to propagate to the top level (and cause window.onerror)\n  }\n\n  (report as any).subscribe = subscribe;\n  (report as any).installGlobalHandler = installGlobalHandler;\n  (report as any).installGlobalUnhandledRejectionHandler = installGlobalUnhandledRejectionHandler;\n\n  return report;\n})();\n\n/**\n * An object representing a single stack frame.\n * @typedef {Object} StackFrame\n * @property {string} url The JavaScript or HTML file URL.\n * @property {string} func The function name, or empty for anonymous functions (if guessing did not work).\n * @property {string[]?} args The arguments passed to the function, if known.\n * @property {number=} line The line number, if known.\n * @property {number=} column The column number, if known.\n * @property {string[]} context An array of source code lines; the middle element corresponds to the correct line#.\n * @memberof TraceKit\n */\n\n/**\n * An object representing a JavaScript stack trace.\n * @typedef {Object} StackTrace\n * @property {string} name The name of the thrown exception.\n * @property {string} message The exception error message.\n * @property {TraceKit.StackFrame[]} stack An array of stack frames.\n * @property {string} mode 'stack', 'stacktrace', 'multiline', 'callers', 'onerror', or 'failed' -- method used to collect the stack trace.\n * @memberof TraceKit\n */\n\n/**\n * TraceKit.computeStackTrace: cross-browser stack traces in JavaScript\n *\n * Syntax:\n *   ```js\n *   s = TraceKit.computeStackTrace(exception) // consider using TraceKit.report instead (see below)\n *   ```\n *\n * Supports:\n *   - Firefox:  full stack trace with line numbers and unreliable column\n *               number on top frame\n *   - Opera 10: full stack trace with line and column numbers\n *   - Opera 9-: full stack trace with line numbers\n *   - Chrome:   full stack trace with line and column numbers\n *   - Safari:   line and column number for the topmost stacktrace element\n *               only\n *   - IE:       no line numbers whatsoever\n *\n * Tries to guess names of anonymous functions by looking for assignments\n * in the source code. In IE and Safari, we have to guess source file names\n * by searching for function bodies inside all page scripts. This will not\n * work for scripts that are loaded cross-domain.\n * Here be dragons: some function names may be guessed incorrectly, and\n * duplicate functions may be mismatched.\n *\n * TraceKit.computeStackTrace should only be used for tracing purposes.\n * Logging of unhandled exceptions should be done with TraceKit.report,\n * which builds on top of TraceKit.computeStackTrace and provides better\n * IE support by utilizing the window.onerror event to retrieve information\n * about the top of the stack.\n *\n * Note: In IE and Safari, no stack trace is recorded on the Error object,\n * so computeStackTrace instead walks its *own* chain of callers.\n * This means that:\n *  * in Safari, some methods may be missing from the stack trace;\n *  * in IE, the topmost function in the stack trace will always be the\n *    caller of computeStackTrace.\n *\n * This is okay for tracing (because you are likely to be calling\n * computeStackTrace from the function you want to be the topmost element\n * of the stack trace anyway), but not okay for logging unhandled\n * exceptions (because your catch block will likely be far away from the\n * inner function that actually caused the exception).\n *\n * @memberof TraceKit\n * @namespace\n */\n\nTraceKit.computeStackTrace = (function computeStackTraceWrapper() {\n  // Contents of Exception in various browsers.\n  //\n  // SAFARI:\n  // ex.message = Can't find variable: qq\n  // ex.line = 59\n  // ex.sourceId = 580238192\n  // ex.sourceURL = http://...\n  // ex.expressionBeginOffset = 96\n  // ex.expressionCaretOffset = 98\n  // ex.expressionEndOffset = 98\n  // ex.name = ReferenceError\n  //\n  // FIREFOX:\n  // ex.message = qq is not defined\n  // ex.fileName = http://...\n  // ex.lineNumber = 59\n  // ex.columnNumber = 69\n  // ex.stack = ...stack trace... (see the example below)\n  // ex.name = ReferenceError\n  //\n  // CHROME:\n  // ex.message = qq is not defined\n  // ex.name = ReferenceError\n  // ex.type = not_defined\n  // ex.arguments = ['aa']\n  // ex.stack = ...stack trace...\n  //\n  // INTERNET EXPLORER:\n  // ex.message = ...\n  // ex.name = ReferenceError\n  //\n  // OPERA:\n  // ex.message = ...message... (see the example below)\n  // ex.name = ReferenceError\n  // ex.opera#sourceloc = 11  (pretty much useless, duplicates the info in ex.message)\n  // ex.stacktrace = n/a; see 'opera:config#UserPrefs|Exceptions Have Stacktrace'\n\n  /**\n   * Computes stack trace information from the stack property.\n   * Chrome and Gecko use this property.\n   * @param {Error} ex\n   * @return {?TraceKit.StackTrace} Stack trace information.\n   * @memberof TraceKit.computeStackTrace\n   */\n  function computeStackTraceFromStackProp(ex: any) {\n    if (!ex.stack) {\n      return null;\n    }\n\n    var chrome = /^\\s*at (?:(.*?) ?\\()?((?:file|https?|blob|chrome-extension|native|eval|webpack|<anonymous>|[a-z]:|\\/).*?)(?::(\\d+))?(?::(\\d+))?\\)?\\s*$/i,\n      gecko = /^\\s*(.*?)(?:\\((.*?)\\))?(?:^|@)((?:file|https?|blob|chrome|webpack|resource|moz-extension).*?:\\/.*?|\\[native code\\]|[^@]*bundle)(?::(\\d+))?(?::(\\d+))?\\s*$/i,\n      winjs = /^\\s*at (?:((?:\\[object object\\])?.+) )?\\(?((?:file|ms-appx|https?|webpack|blob):.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i,\n      // Used to additionally parse URL/line/column from eval frames\n      isEval,\n      geckoEval = /(\\S+) line (\\d+)(?: > eval line \\d+)* > eval/i,\n      chromeEval = /\\((\\S*)(?::(\\d+))(?::(\\d+))\\)/,\n      lines = ex.stack.split('\\n'),\n      stack = [],\n      submatch,\n      parts,\n      element,\n      reference = /^(.*) is undefined$/.exec(ex.message);\n\n    for (var i = 0, j = lines.length; i < j; ++i) {\n      if ((parts = chrome.exec(lines[i]))) {\n        var isNative = parts[2] && parts[2].indexOf('native') === 0; // start of line\n        isEval = parts[2] && parts[2].indexOf('eval') === 0; // start of line\n        if (isEval && (submatch = chromeEval.exec(parts[2]))) {\n          // throw out eval line/column and use top-most line/column number\n          parts[2] = submatch[1]; // url\n          // NOTE: It's messing out our integration tests in Karma, let's see if we can live with it – Kamil\n          // parts[3] = submatch[2]; // line\n          // parts[4] = submatch[3]; // column\n        }\n        element = {\n          url: !isNative ? parts[2] : null,\n          func: parts[1] || UNKNOWN_FUNCTION,\n          args: isNative ? [parts[2]] : [],\n          line: parts[3] ? +parts[3] : null,\n          column: parts[4] ? +parts[4] : null,\n        };\n      } else if ((parts = winjs.exec(lines[i]))) {\n        element = {\n          url: parts[2],\n          func: parts[1] || UNKNOWN_FUNCTION,\n          args: [],\n          line: +parts[3],\n          column: parts[4] ? +parts[4] : null,\n        };\n      } else if ((parts = gecko.exec(lines[i]))) {\n        isEval = parts[3] && parts[3].indexOf(' > eval') > -1;\n        if (isEval && (submatch = geckoEval.exec(parts[3]))) {\n          // throw out eval line/column and use top-most line number\n          parts[3] = submatch[1];\n          // NOTE: It's messing out our integration tests in Karma, let's see if we can live with it – Kamil\n          // parts[4] = submatch[2];\n          // parts[5] = null; // no column when eval\n        } else if (i === 0 && !parts[5] && ex.columnNumber !== void 0) {\n          // FireFox uses this awesome columnNumber property for its top frame\n          // Also note, Firefox's column number is 0-based and everything else expects 1-based,\n          // so adding 1\n          // NOTE: this hack doesn't work if top-most frame is eval\n          stack[0].column = ex.columnNumber + 1;\n        }\n        element = {\n          url: parts[3],\n          func: parts[1] || UNKNOWN_FUNCTION,\n          args: parts[2] ? parts[2].split(',') : [],\n          line: parts[4] ? +parts[4] : null,\n          column: parts[5] ? +parts[5] : null,\n        };\n      } else {\n        continue;\n      }\n\n      if (!element.func && element.line) {\n        element.func = UNKNOWN_FUNCTION;\n      }\n\n      (element as any).context = null;\n\n      stack.push(element);\n    }\n\n    if (!stack.length) {\n      return null;\n    }\n\n    if (stack[0] && stack[0].line && !stack[0].column && reference) {\n      stack[0].column = null;\n    }\n\n    return {\n      mode: 'stack',\n      name: ex.name,\n      message: ex.message,\n      stack: stack,\n    };\n  }\n\n  /**\n   * Computes stack trace information from the stacktrace property.\n   * Opera 10+ uses this property.\n   * @param {Error} ex\n   * @return {?TraceKit.StackTrace} Stack trace information.\n   * @memberof TraceKit.computeStackTrace\n   */\n  function computeStackTraceFromStacktraceProp(ex: any) {\n    // Access and store the stacktrace property before doing ANYTHING\n    // else to it because Opera is not very good at providing it\n    // reliably in other circumstances.\n    var stacktrace = ex.stacktrace;\n    if (!stacktrace) {\n      return;\n    }\n\n    var opera10Regex = / line (\\d+).*script (?:in )?(\\S+)(?:: in function (\\S+))?$/i,\n      opera11Regex = / line (\\d+), column (\\d+)\\s*(?:in (?:<anonymous function: ([^>]+)>|([^\\)]+))\\((.*)\\))? in (.*):\\s*$/i,\n      lines = stacktrace.split('\\n'),\n      stack = [],\n      parts;\n\n    for (var line = 0; line < lines.length; line += 2) {\n      var element = null;\n      if ((parts = opera10Regex.exec(lines[line]))) {\n        element = {\n          url: parts[2],\n          line: +parts[1],\n          column: null,\n          func: parts[3],\n          args: [],\n        };\n      } else if ((parts = opera11Regex.exec(lines[line]))) {\n        element = {\n          url: parts[6],\n          line: +parts[1],\n          column: +parts[2],\n          func: parts[3] || parts[4],\n          args: parts[5] ? parts[5].split(',') : [],\n        };\n      }\n\n      if (element) {\n        if (!element.func && element.line) {\n          element.func = UNKNOWN_FUNCTION;\n        }\n        if (element.line) {\n          (element as any).context = null;\n        }\n\n        if (!(element as any).context) {\n          (element as any).context = [lines[line + 1]];\n        }\n\n        stack.push(element);\n      }\n    }\n\n    if (!stack.length) {\n      return null;\n    }\n\n    return {\n      mode: 'stacktrace',\n      name: ex.name,\n      message: ex.message,\n      stack: stack,\n    };\n  }\n\n  /**\n   * NOT TESTED.\n   * Computes stack trace information from an error message that includes\n   * the stack trace.\n   * Opera 9 and earlier use this method if the option to show stack\n   * traces is turned on in opera:config.\n   * @param {Error} ex\n   * @return {?TraceKit.StackTrace} Stack information.\n   * @memberof TraceKit.computeStackTrace\n   */\n  function computeStackTraceFromOperaMultiLineMessage(ex: any) {\n    // TODO: Clean this function up\n    // Opera includes a stack trace into the exception message. An example is:\n    //\n    // Statement on line 3: Undefined variable: undefinedFunc\n    // Backtrace:\n    //   Line 3 of linked script file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.js: In function zzz\n    //         undefinedFunc(a);\n    //   Line 7 of inline#1 script in file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.html: In function yyy\n    //           zzz(x, y, z);\n    //   Line 3 of inline#1 script in file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.html: In function xxx\n    //           yyy(a, a, a);\n    //   Line 1 of function script\n    //     try { xxx('hi'); return false; } catch(ex) { TraceKit.report(ex); }\n    //   ...\n\n    var lines = ex.message.split('\\n');\n    if (lines.length < 4) {\n      return null;\n    }\n\n    var lineRE1 = /^\\s*Line (\\d+) of linked script ((?:file|https?|blob)\\S+)(?:: in function (\\S+))?\\s*$/i,\n      lineRE2 = /^\\s*Line (\\d+) of inline#(\\d+) script in ((?:file|https?|blob)\\S+)(?:: in function (\\S+))?\\s*$/i,\n      lineRE3 = /^\\s*Line (\\d+) of function script\\s*$/i,\n      stack = [],\n      scripts = window && window.document && window.document.getElementsByTagName('script'),\n      inlineScriptBlocks = [],\n      parts;\n\n    for (var s in scripts) {\n      if (_has(scripts, s) && !scripts[s].src) {\n        inlineScriptBlocks.push(scripts[s]);\n      }\n    }\n\n    for (var line = 2; line < lines.length; line += 2) {\n      var item = null;\n      if ((parts = lineRE1.exec(lines[line]))) {\n        item = {\n          url: parts[2],\n          func: parts[3],\n          args: [],\n          line: +parts[1],\n          column: null,\n        };\n      } else if ((parts = lineRE2.exec(lines[line]))) {\n        item = {\n          url: parts[3],\n          func: parts[4],\n          args: [],\n          line: +parts[1],\n          column: null, // TODO: Check to see if inline#1 (+parts[2]) points to the script number or column number.\n        };\n      } else if ((parts = lineRE3.exec(lines[line]))) {\n        var url = getLocationHref().replace(/#.*$/, '');\n        item = {\n          url: url,\n          func: '',\n          args: [],\n          line: parts[1],\n          column: null,\n        };\n      }\n\n      if (item) {\n        if (!item.func) {\n          item.func = UNKNOWN_FUNCTION;\n        }\n        // if (context) alert(\"Context mismatch. Correct midline:\\n\" + lines[i+1] + \"\\n\\nMidline:\\n\" + midline + \"\\n\\nContext:\\n\" + context.join(\"\\n\") + \"\\n\\nURL:\\n\" + item.url);\n        (item as any).context = [lines[line + 1]];\n        stack.push(item);\n      }\n    }\n    if (!stack.length) {\n      return null; // could not parse multiline exception message as Opera stack trace\n    }\n\n    return {\n      mode: 'multiline',\n      name: ex.name,\n      message: lines[0],\n      stack: stack,\n    };\n  }\n\n  /**\n   * Adds information about the first frame to incomplete stack traces.\n   * Safari and IE require this to get complete data on the first frame.\n   * @param {TraceKit.StackTrace} stackInfo Stack trace information from\n   * one of the compute* methods.\n   * @param {string} url The URL of the script that caused an error.\n   * @param {(number|string)} lineNo The line number of the script that\n   * caused an error.\n   * @param {string=} message The error generated by the browser, which\n   * hopefully contains the name of the object that caused the error.\n   * @return {boolean} Whether or not the stack information was\n   * augmented.\n   * @memberof TraceKit.computeStackTrace\n   */\n  function augmentStackTraceWithInitialElement(stackInfo: any, url: any, lineNo: any, message: any) {\n    var initial = {\n      url: url,\n      line: lineNo,\n    };\n\n    if (initial.url && initial.line) {\n      stackInfo.incomplete = false;\n\n      if (!(initial as any).func) {\n        (initial as any).func = UNKNOWN_FUNCTION;\n      }\n\n      if (!(initial as any).context) {\n        (initial as any).context = null;\n      }\n\n      var reference = / '([^']+)' /.exec(message);\n      if (reference) {\n        (initial as any).column = null;\n      }\n\n      if (stackInfo.stack.length > 0) {\n        if (stackInfo.stack[0].url === initial.url) {\n          if (stackInfo.stack[0].line === initial.line) {\n            return false; // already in stack trace\n          } else if (!stackInfo.stack[0].line && stackInfo.stack[0].func === (initial as any).func) {\n            stackInfo.stack[0].line = initial.line;\n            stackInfo.stack[0].context = (initial as any).context;\n            return false;\n          }\n        }\n      }\n\n      stackInfo.stack.unshift(initial);\n      stackInfo.partial = true;\n      return true;\n    } else {\n      stackInfo.incomplete = true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Computes stack trace information by walking the arguments.caller\n   * chain at the time the exception occurred. This will cause earlier\n   * frames to be missed but is the only way to get any stack trace in\n   * Safari and IE. The top frame is restored by\n   * {@link augmentStackTraceWithInitialElement}.\n   * @param {Error} ex\n   * @return {TraceKit.StackTrace=} Stack trace information.\n   * @memberof TraceKit.computeStackTrace\n   */\n  function computeStackTraceByWalkingCallerChain(ex: any, depth: any) {\n    var functionName = /function\\s+([_$a-zA-Z\\xA0-\\uFFFF][_$a-zA-Z0-9\\xA0-\\uFFFF]*)?\\s*\\(/i,\n      stack = [],\n      funcs = {},\n      recursion = false,\n      parts,\n      item;\n\n    for (var curr = computeStackTraceByWalkingCallerChain.caller; curr && !recursion; curr = curr.caller) {\n      if (curr === computeStackTrace || curr === TraceKit.report) {\n        continue;\n      }\n\n      item = {\n        url: null,\n        func: UNKNOWN_FUNCTION,\n        args: [],\n        line: null,\n        column: null,\n      };\n\n      if (curr.name) {\n        item.func = curr.name;\n      } else if ((parts = functionName.exec(curr.toString()))) {\n        item.func = parts[1];\n      }\n\n      if (typeof item.func === 'undefined') {\n        try {\n          item.func = (parts as any).input.substring(0, (parts as any).input.indexOf('{'));\n        } catch (e) {}\n      }\n\n      if ((funcs as any)['' + curr]) {\n        recursion = true;\n      } else {\n        (funcs as any)['' + curr] = true;\n      }\n\n      stack.push(item);\n    }\n\n    if (depth) {\n      stack.splice(0, depth);\n    }\n\n    var result = {\n      mode: 'callers',\n      name: ex.name,\n      message: ex.message,\n      stack: stack,\n    };\n    augmentStackTraceWithInitialElement(\n      result,\n      ex.sourceURL || ex.fileName,\n      ex.line || ex.lineNumber,\n      ex.message || ex.description,\n    );\n    return result;\n  }\n\n  /**\n   * Computes a stack trace for an exception.\n   * @param {Error} ex\n   * @param {(string|number)=} depth\n   * @memberof TraceKit.computeStackTrace\n   */\n  function computeStackTrace(ex: any, depth: any) {\n    var stack = null;\n    depth = depth == null ? 0 : +depth;\n\n    try {\n      // This must be tried first because Opera 10 *destroys*\n      // its stacktrace property if you try to access the stack\n      // property first!!\n      stack = computeStackTraceFromStacktraceProp(ex);\n      if (stack) {\n        return stack;\n      }\n    } catch (e) {}\n\n    try {\n      stack = computeStackTraceFromStackProp(ex);\n      if (stack) {\n        return stack;\n      }\n    } catch (e) {}\n\n    try {\n      stack = computeStackTraceFromOperaMultiLineMessage(ex);\n      if (stack) {\n        return stack;\n      }\n    } catch (e) {}\n\n    try {\n      stack = computeStackTraceByWalkingCallerChain(ex, depth + 1);\n      if (stack) {\n        return stack;\n      }\n    } catch (e) {}\n\n    return {\n      original: ex,\n      name: ex.name,\n      message: ex.message,\n      mode: 'failed',\n    };\n  }\n\n  (computeStackTrace as any).augmentStackTraceWithInitialElement = augmentStackTraceWithInitialElement;\n  (computeStackTrace as any).computeStackTraceFromStackProp = computeStackTraceFromStackProp;\n\n  return computeStackTrace;\n})();\n\nTraceKit.collectWindowErrors = true;\nTraceKit.linesOfContext = 11;\n\nconst subscribe = TraceKit.report.subscribe;\nconst installGlobalHandler = TraceKit.report.installGlobalHandler;\nconst installGlobalUnhandledRejectionHandler = TraceKit.report.installGlobalUnhandledRejectionHandler;\nconst computeStackTrace: ComputeStackTrace = TraceKit.computeStackTrace;\n\nexport { subscribe, installGlobalHandler, installGlobalUnhandledRejectionHandler, computeStackTrace };\n"]}