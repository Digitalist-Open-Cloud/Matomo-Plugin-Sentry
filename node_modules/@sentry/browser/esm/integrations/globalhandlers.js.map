{"version":3,"file":"globalhandlers.js","sourceRoot":"","sources":["../../src/integrations/globalhandlers.ts"],"names":[],"mappings":"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","sourcesContent":["import { getCurrentHub } from '@sentry/core';\nimport { Event, Integration } from '@sentry/types';\nimport { logger } from '@sentry/utils/logger';\nimport { addExceptionTypeValue } from '@sentry/utils/misc';\nimport { normalize } from '@sentry/utils/object';\nimport { truncate } from '@sentry/utils/string';\n\nimport { eventFromStacktrace } from '../parsers';\nimport {\n  installGlobalHandler,\n  installGlobalUnhandledRejectionHandler,\n  StackTrace as TraceKitStackTrace,\n  subscribe,\n} from '../tracekit';\n\nimport { shouldIgnoreOnError } from './helpers';\n\n/** JSDoc */\ninterface GlobalHandlersIntegrations {\n  onerror: boolean;\n  onunhandledrejection: boolean;\n}\n\n/** Global handlers */\nexport class GlobalHandlers implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public name: string = GlobalHandlers.id;\n\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'GlobalHandlers';\n\n  /** JSDoc */\n  private readonly _options: GlobalHandlersIntegrations;\n\n  /** JSDoc */\n  public constructor(options?: GlobalHandlersIntegrations) {\n    this._options = {\n      onerror: true,\n      onunhandledrejection: true,\n      ...options,\n    };\n  }\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    Error.stackTraceLimit = 50;\n\n    subscribe((stack: TraceKitStackTrace, _: boolean, error: Error) => {\n      // TODO: use stack.context to get a valuable information from TraceKit, eg.\n      // [\n      //   0: \"  })\"\n      //   1: \"\"\n      //   2: \"  function foo () {\"\n      //   3: \"    Sentry.captureException('some error')\"\n      //   4: \"    Sentry.captureMessage('some message')\"\n      //   5: \"    throw 'foo'\"\n      //   6: \"  }\"\n      //   7: \"\"\n      //   8: \"  function bar () {\"\n      //   9: \"    foo();\"\n      //   10: \"  }\"\n      // ]\n      if (shouldIgnoreOnError()) {\n        return;\n      }\n      const self = getCurrentHub().getIntegration(GlobalHandlers);\n      if (self) {\n        getCurrentHub().captureEvent(self._eventFromGlobalHandler(stack), {\n          data: { stack },\n          originalException: error,\n        });\n      }\n    });\n\n    if (this._options.onerror) {\n      logger.log('Global Handler attached: onerror');\n      installGlobalHandler();\n    }\n\n    if (this._options.onunhandledrejection) {\n      logger.log('Global Handler attached: onunhandledrejection');\n      installGlobalUnhandledRejectionHandler();\n    }\n  }\n\n  /**\n   * This function creates an Event from an TraceKitStackTrace.\n   *\n   * @param stacktrace TraceKitStackTrace to be converted to an Event.\n   */\n  private _eventFromGlobalHandler(stacktrace: TraceKitStackTrace): Event {\n    const event = eventFromStacktrace(stacktrace);\n\n    const data: { [key: string]: string } = {\n      mode: stacktrace.mode,\n    };\n\n    if (stacktrace.message) {\n      data.message = stacktrace.message;\n    }\n\n    if (stacktrace.name) {\n      data.name = stacktrace.name;\n    }\n\n    const client = getCurrentHub().getClient();\n    const maxValueLength = (client && client.getOptions().maxValueLength) || 250;\n\n    const fallbackValue = stacktrace.original\n      ? truncate(JSON.stringify(normalize(stacktrace.original)), maxValueLength)\n      : '';\n    const fallbackType = stacktrace.mechanism === 'onunhandledrejection' ? 'UnhandledRejection' : 'Error';\n\n    // This makes sure we have type/value in every exception\n    addExceptionTypeValue(event, fallbackValue, fallbackType, {\n      data,\n      handled: false,\n      type: stacktrace.mechanism,\n    });\n\n    return event;\n  }\n}\n"]}